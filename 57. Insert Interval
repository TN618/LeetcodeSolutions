vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int> > ans;
        int n = intervals.size();
        sort(intervals.begin(),intervals.end());
        int count = 1;
        ans.push_back(intervals[0]);
        for(int i = 1; i < n; i++){
            if(intervals[i][0] <= ans[count-1][1]){
                ans[count-1][1] = max(ans[count-1][1],intervals[i][1]);
            }
            else{ans.push_back(intervals[i]);count++;}
        }
        return ans;
    }
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if(intervals.size() == 0){
            intervals.push_back(newInterval);
            return intervals;
        }
        int n = intervals.size();
        // int i = 0;
        // while(intervals[i][0] < newInterval[0] && i < n){
        //     i++;
        // }
        // while(intervals[i][1] < newInterval[1] && intervals[i][0] == newInterval[0] && i < n){
        //     i++;
        // }
        intervals.push_back(newInterval);
        // else{intervals.insert(intervals.begin()+i,newInterval);}
        intervals = merge(intervals);
        return intervals;
    }
