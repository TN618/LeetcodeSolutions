bool searchMatrix(vector<vector<int>>& mat, int target) {
        int n = mat.size();
        bool f = 0;
        int m = mat[0].size();
        for(int i = 0; i < n; i++){
            if(target > mat[i][0] && target < mat[i][m-1]){
                int lef = 0, rig = m-1;
                while(lef <= rig){
                    int mid = (lef+rig)/2;
                    if(mat[i][mid] == target){f = 1;break;}
                    if(mat[i][mid] > target){rig = mid-1;}
                    else{lef = mid+1;}
                }
            }
            if(f)break;
            else if(mat[i][0] == target || mat[i][m-1] == target){f = 1;break;}
            else if(mat[i][0] > target){f = 0;break;}
        }
        return f;
    }
    /*
    O(log(m*n)) soln -

    int row = matrix.size();
        int col = matrix[0].size();
        int n = row*col;

        int s = 0;
        int e = n-1;
        int mid = s + (e-s)/2;

        while(s<=e){

            int rownumber = mid/col;
            int colnumber = mid%col;

            int currentnumber = matrix[rownumber][colnumber];
            if(currentnumber == target){
                return true;
            }
            else if (target>currentnumber){
                s = mid+1;
            }
            else{
                e = mid-1;
            }
            mid = s + (e-s)/2;
        }
        return false;
    */
