int gen(int ind, int ind2, string word1, string word2, vector<vector<int> >&dp){
        if(ind >= word1.size())return word2.size()-ind2;
        if(ind2 >= word2.size())return word1.length()-ind;
        if(dp[ind][ind2] != -1)return dp[ind][ind2];
        int ans = 0;
        if(word1[ind] == word2[ind2]){ans = gen(ind+1,ind2+1,word1,word2,dp);}
        else{
            int ins = gen(ind,ind2+1,word1,word2,dp);
            int del = gen(ind+1,ind2,word1,word2,dp);
            int rep = gen(ind+1,ind2+1,word1,word2,dp);
            ans = 1+min(ins,min(del,rep));
        }
        return dp[ind][ind2] = ans;
    }
    int minDistance(string word1, string word2) {
        int l1 = word1.size();
        int l2 = word2.size();
        vector<vector<int> >dp(l1+1,vector<int>(l2+1,0));
        for(int i = 1; i <= l1; i++){
            dp[i][0] = i;
        }
        for(int i = 1; i <= l2; i++){
            dp[0][i] = i;
        }
        // int ans = gen(0,0,word1,word2,dp);
        for(int i = 1; i <= l1; i++){
            for(int j = 1; j <= l2; j++){
                if(word1[i-1] != word2[j-1]){
                    int ins = dp[i][j-1];
                    int del = dp[i-1][j];
                    int rep = dp[i-1][j-1];
                    dp[i][j] = 1+min(ins,min(del,rep));
                }
                else{
                    dp[i][j] = dp[i-1][j-1];
                }
            }
        }
        return dp[l1][l2];
    }
