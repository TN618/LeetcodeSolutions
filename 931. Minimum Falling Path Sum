int gen(vector<vector<int> >& mat, int i, int j, vector<vector<int> >& dp){
        if(i == mat.size()-1){
            return dp[i][j] = mat[i][j];;
        }
        int lef = INT_MAX, rig = INT_MAX;
        if(dp[i][j] != INT_MAX)return dp[i][j];
        int st = gen(mat,i+1,j,dp);
        if(j-1 >= 0){
            lef = gen(mat,i+1,j-1,dp);
        }
        if(j+1 < mat.size())
        rig = gen(mat,i+1,j+1,dp);
        return dp[i][j] = min(st,min(rig,lef)) + mat[i][j];
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int temp = 0;
        int ans = INT_MAX;
        vector<vector<int> > dp(n,vector<int>(n,INT_MAX));
        for(int i = 0; i < n; i++){
            ans = min(gen(matrix,0,i,dp),ans);
        }
        return ans;
    }
